
Git Commands and its use
=======================

1. git config => This command sets the author name and email address respectively to be used with your commits. (~)

2. git init => This command is used to start a new repository.(~)

3. git clone => This command is used to obtain a repository from an existing URL.(~)

4. git add => This command adds a file to the staging area.(~)

5. git commit (~)
	- git commit -m “[ Type in the commit message]” => This command records or snapshots the file permanently in the version history.
	- git commit -a => This command commits any files you’ve added with the git add command and also commits any files you’ve changed since then.

6. git diff(~)
	- git diff => This command shows the file differences which are not yet staged.
	- git diff –staged => This command shows the differences between the files in the staging area and the latest version present.
	- git diff [first branch] [second branch] => This command shows the differences between the two branches mentioned.
	
7. git reset(~)
	- git reset [file] => This command unstages the file, but it preserves the file contents.
	- git reset [commit]  => This command undoes all the commits after the specified commit and preserves the changes locally. 
	- git reset –hard [commit] => This command discards all history and goes back to the specified commit.

8. git status => This command lists all the files that have to be committed.(~)

9. git rm(~)
	 - git rm [file] => This command deletes the file from your working directory and stages the deletion.

10. git log(~)
	- git log => This command is used to list the version history for the current branch.
	- git log –follow[file] => This command lists version history for a file, including the renaming of files also.

11. git show(~)
	- git show [commit]  => This command shows the metadata and content changes of the specified commit.

12. git tag(~)
	- git tag [commitID] => This command is used to give tags to the specified commit.

13. git branch(~)
	- git branch  => This command lists all the local branches in the current repository.
	- git branch [branch name]   => This command creates a new branch.(It exists the current branch,not goes to the newly created branch)
	- git branch -d [branch name]  => This command deletes the feature branch.


14. git checkout (~)
	- git checkout [branch name]  => This command is used to switch from one branch to another.
	- git checkout -b [branch name]  => This command creates a new branch and also switches to it.

15. git merge(~)
	- git merge [branch name]  => This command merges the specified branch’s history into the current branch.

16. git remote (~)
	- git remote add [variable name] [Remote Server Link]  => This command is used to connect your local repository to the remote server.

17. git push(~)
	- git push [variable name] master => This command sends the committed changes of master branch to your remote repository.
	- git push [variable name] [branch]  => This command sends the branch commits to your remote repository.
	- git push –all [variable name] => This command pushes all branches to your remote repository.
	- git push [variable name] :[branch name]  => This command deletes a branch on your remote repository.

18. git pull(~)
	- git pull [Repository Link]  => This command fetches and merges changes on the remote server to your working directory.

19. git stash
	- git stash save => This command temporarily stores all the modified tracked files.
	- git stash pop => This command restores the most recently stashed files.
	- git stash list => This command lists all stashed changesets.
	- git stash drop => This command discards the most recently stashed changeset.

git push origin --delete branchName => delte branch from the server.

pull request => pull request is created when developer1 can change something in there local branch
	        and tell the Developer branch to merge it to the master branch.
	

